#ifndef WitchBlade_h__
#define WitchBlade_h__

#include "Player.h"

namespace  Engine
{
	class CLayer;
}
class CUI_Skill;
class CMap_Store;
class CWitchBlade
	: public CPlayer
{
public:
	enum WITCHBLADE { WITCH_SELIDLE, WITCH_LOVE, WITCH_IDLE, WITCH_WALKF, WITCH_WALKB, WITCH_RUNF, WITCH_RUNL,
		WITCH_RUNR, WITCH_RUNF_IN, WITCH_RUNB_IN, WITCH_RUNL_IN, WITCH_RUNR_IN, WITCH_DASHF, WITCH_DASHB, WITCH_DASHL, WITCH_DASHR,
		WITCH_JUMPFA, WITCH_JUMPFB, WITCH_JUMPFC, WITCH_JUMPFD, WITCH_JUMPFSB, WITCH_JUMPFSC, WITCH_JUMPFSD, 
		WITCH_JUMPBA, WITCH_JUMPBB, WITCH_JUMPBC, WITCH_JUMPBD, WITCH_JUMPLA, WITCH_JUMPLB, WITCH_JUMPLC, WITCH_JUMPLD, WITCH_JUMPRA, WITCH_JUMPRB, WITCH_JUMPRC,
		WITCH_JUMPRD, WITCH_INSTALL, WITCH_DISARM, WITCH_ATTACKIDLE, WITCH_ATTACK1, WITCH_ATTACK2, WITCH_ATTACK3, WITCH_ATTACK4, 
		WITCH_ATTACK5, WITCH_ATTACK6, WITCH_ATTACK7, WITCH_ATTACK8, WITCH_ATTACK9, WITCH_EVADE, WITCH_JUMPATTACK,
		WITCH_JUMPATTACKL, WITCH_JUMPATTACKR, WITCH_GROUNDKICK, WITCH_SKILLRISINGF, WITCH_SKILLEVASIONL, WITCH_SKILLEVASIONR,
		WITCH_SKILLJUMPKICK, WITCH_SKILLJUMPKICK2, WITCH_SKILLCATCH, WITCH_SKILLCAPTURE, WITCH_SKILLROTATIONKICK, WITCH_SKILLKICKCHOP,
		WITCH_SKILL2ANTHREAT, WITCH_SKILLBASH, WITCH_SKILLBLADERUNNER, WITCH_SKILLCOMBOATTACK, WITCH_SKILLCOMBOBLEEDING, WITCH_SKILLBUFF,
		WITCH_SKILLCOUNTER, WITCH_SKILLDARKGRAVE, WITCH_SKILLDESH, WITCH_SKILLEVASIONR_2, WITCH_SKILLEVASIONL_2, WITCH_SKILLFLING,
		WITCH_SKILLGROUNDKICKSWO, WITCH_SKILLRABBIT, WITCH_SKILLRCATCH, WITCH_SKILLMOVEBSPINNINGHEART, WITCH_SKILLMOVELSPINNINGHEART,
		WITCH_SKILLMOVERSPINNINGHEART, WITCH_SKILLSPINNINGHEARTA, WITCH_SKILLSPINNINGHEARTB, WITCH_SKILLSPININGHEARTC,
		WITCH_SKILLMAGICSHIELD, WITCH_SKILLMAGICSHIELDLOOP, WITCH_STUN, WITCH_DAMAGEF, WITCH_DAMAGEB, 
		WITCH_DAMAGEL, WITCH_DAMAGER, WITCH_DAMAGESPINA, WITCH_DAMAGESPINB, WITCH_DHFA, WITCH_DHFB, WITCH_DHFC,
		WITCH_DOWNROLLL, WITCH_DOWNROLLR, WITCH_DOWN, WITCH_STANDUP, WITCH_QUICKSTANDUPF, WITCH_QUICKSTANDUPB, WITCH_DIE,
		WITCH_PICKUP, WITCH_LEVELUP, WITCH_END};
public:
	enum WITCHBLADEACTION {
		ACTION_MOVEF, ACTION_WALKF, ACTION_MOVEB, ACTION_MOVER, ACTION_MOVEL, ACTION_JUMP,
		ACTION_ATTACK1, ACTION_ATTACK2, ACTION_ATTACK3, ACTION_ATTACK4, ACTION_ATTACK5, ACTION_JUMPATTACKL, ACTION_JUMPATTACKR,
		ACTION_DASHF, ACTION_DASHB, ACTION_DASHR, ACTION_DASHL, ACTION_RUSH, ACTION_INSTALL, ACTION_RIDDLEKICK, ACTION_EVADEATTACK, ACTION_TECHNICALDOWNACTION, ACTION_TECHNICALDOWNACTIONF, ACTION_TECHNICALDOWNACTIONB,
		ACTION_BLAIRESILHOUETTEL, ACTION_BLAIRESILHOUETTER, ACTION_RISINGATTACK, ACTION_FLYDANCE, ACTION_PLEDGEBLADE, ACTION_VIPERKNEEKICK,
		ACTION_NAILSCRATCH, ACTION_BLACKROSE, ACTION_SPINNINGHEART, ACTION_SPINNINGHEARTB, ACTION_SPINNINGHEARTL, ACTION_SPINNINGHEARTR, ACTION_TRICKYRABBIT, ACTION_PLANETDANCE,
		ACTION_FLORA, ACTION_SPINTURNTHRUST, ACTION_DRAGONDANCE, ACTION_SOFTRANDINGF, ACTION_SOFTRANDINGB, ACTION_SOFTRANDINGR,
		ACTION_SOFTRANDINGL, ACTION_SILHOUETTEDANCEL, ACTION_SILHOUETTEDANCER,
		ACTION_URBANBREAK, ACTION_HILLTURN, ACTION_TRIPLESHASE, ACTION_RAIDFLOWER, ACTION_ILLUSIONDANCE,
		ACTION_VIOLETCROSS, ACTION_CROSSBLITZ, ACTION_SPIRALDANCE, ACTION_DARKFALLINGGRAVE, ACTION_TRANSMISSION, 
		ACTION_DAMAGEF, ACTION_DAMAGEB, ACTION_DAMAGEL, ACTION_DAMAGER, ACTION_UP, ACTION_DOWN, ACTION_STUN, ACTION_DIE, 
		ACTION_END
	};

private:
	explicit			CWitchBlade(LPDIRECT3DDEVICE9 pGraphicDev, const wstring& wstrName);
	virtual				~CWitchBlade(void);

public:
	const _bool* CWitchBlade::Get_IsSkill(const _uint& iState) const;
	_bool Get_CameraMove(void);
public:
	virtual	void Set_ActionEnd(void);
	void Set_Skill(const CUI_Skill* pSkill);
	void Set_Move(void); // UI_Skill용
	void Compute_Camera(void);
public:
	virtual HRESULT Start_ForScene(void);
	virtual void Update_Object(const _float& fTimeDelta);
	virtual void Render_Object(void);
	virtual	void Render_Object(LPD3DXEFFECT pEffect, const _uint iPassIdx);


private:
	HRESULT				Ready_Object(SCENE_TYPE eSceneType);
	HRESULT				Add_Component(void);
	HRESULT				SetUp_ConstantTable(LPD3DXEFFECT pEffect);
	HRESULT				Set_Shadow_ConstanTable(LPD3DXEFFECT pEffect);
	HRESULT				Set_CACD_Shadow_ConstanTable(LPD3DXEFFECT pEffect);

	//데칼테스트
//private:
//	LPD3DXMESH*					m_pMapMesh[9];
//	CMap_Store*					m_pMapStore;
//	_vec3						m_fPickPos;
//	_vec3						m_vPickDir;
//	Engine::CLayer*				m_pLogicLayer;
//	_bool						m_bDecal;
	//==========
public:
	static CWitchBlade* Create(LPDIRECT3DDEVICE9 pGraphicDev, const wstring& wstrName, SCENE_TYPE eSceneType);
private:
	virtual void		Free(void);
};

#endif // WitchBlade_h__
