#ifndef Mistic_h__
#define Mistic_h__

#include "Player.h"

namespace  Engine
{
	class CLayer;
}

class CMisticBullet;

class CMistic
	: public CPlayer
{
public:
	enum MISTIC {
		MISTIC_IDLE, MISTIC_WALKF, MISTIC_WALKB, MISTIC_RUNF, MISTIC_RUNL, MISTIC_RUNR, MISTIC_JUMPFA, MISTIC_JUMPFB, MISTIC_JUMPFC,
		MISTIC_JUMPFD, MISTIC_JUMPBA, MISTIC_JUMPBB, MISTIC_JUMPBC, MISTIC_JUMPBD, MISTIC_JUMPLA, MISTIC_JUMPLB, MISTIC_JUMPLC,
		MISTIC_JUMPLD, MISTIC_JUMPRA, MISTIC_JUMPRB, MISTIC_JUMPRC, MISTIC_JUMPRD, MISTIC_INSTALL, MISTIC_DISARM, MISTIC_BATTLEIDLE,
		MISTIC_RUNF_IN, MISTIC_RUNB_IN, MISTIC_RUNL_IN, MISTIC_RUNR_IN, MISTIC_DASHF, MISTIC_DASHB, MISTIC_DASHL, MISTIC_DASHR,
		MISTIC_JUMPFA_IN, MISTIC_JUMPFB_IN, MISTIC_JUMPFC_IN, MISTIC_JUMPFD_IN, MISTIC_JUMPBA_IN, MISTIC_JUMPBB_IN, MISTIC_JUMPBC_IN,
		MISTIC_JUMPBD_IN, MISTIC_JUMPLA_IN, MISTIC_JUMPLB_IN, MISTIC_JUMPLC_IN, MISTIC_JUMPLD_IN, MISTIC_JUMPRA_IN, MISTIC_JUMPRB_IN,
		MISTIC_JUMPRC_IN, MISTIC_JUMPRD_IN, MISTIC_UPPERKICK1, MISTIC_UPPERKICK1E, MISTIC_UPPERKICK2, MISTIC_ATTACK1, MISTIC_ATTACK2,
		MISTIC_ATTACK3, MISTIC_JUMPATTACKLKEY, MISTIC_JUMPDOWNKICK, MISTIC_JUMPATTACKRKEY, MISTIC_RISINGATTACK, MISTIC_RELOAD,
		MISTIC_ESCAPER, MISTIC_ESCAPEL, MISTIC_DOWNKICK, MISTIC_GAILSHOTREADY, MISTIC_GAILSHOTLOOP, MISTIC_GAILSHOTEND,
		MISTIC_FIRESHOTREADY, MISTIC_FIRESHOTLOOP, MISTIC_FIRESHOTEND, MISTIC_LOCKONTARGETREADY, MISTIC_LOCKONTARGETLOOP,
		MISTIC_LOCKONTARGETEND, MISTIC_LOCKONTARGETSHOT, MISTIC_GRAVITYSHOTREADY, MISTIC_GRAVITYSHOTLOOP, MISTIC_GRAVITYSHOTEND,
		MISTIC_SHOOTJUMPREADY, MISTIC_SHOOTJUMPSHOT, MISTIC_SHOOTJUMPEND, MISTIC_SPINCRUSHA, MISTIC_SPINCRUSHB, MISTIC_SPINCRUSHC,
		MISTIC_HOLDINGSHOTFAIL, MISTIC_HOLDINGSHOT2, MISTIC_DAMAGEF, MISTIC_DAMAGEB, MISTIC_DAMAGEL, MISTIC_DAMAGER, MISTIC_DOWNA,
		MISTIC_DOWNB, MISTIC_DOWNC, MISTIC_DOWN, MISTIC_STANDUP, MISTIC_QUICKSTANDF, MISTIC_QUICKSTANDB, MISTIC_STUN, MISTIC_PICKUP,
		MISTIC_LEVELUP, MISTIC_END
	};

public:
	enum MISTICACTION { ACTION_MOVEF, ACTION_WALKF, ACTION_MOVEB, ACTION_MOVER, ACTION_MOVEL, ACTION_JUMP,
		ACTION_DASHF, ACTION_DASHB, ACTION_DASHR, ACTION_DASHL, ACTION_ESCAPEL, ACTION_ESCAPER,
		ACTION_ATTACK1, ACTION_ATTACK2, ACTION_ATTACK3, ACTION_RUSH, ACTION_INSTALL, ACTION_SPINCRUSH, ACTION_LOCKONTARGETSHOT,
		ACTION_SHOOTINGJUMP, ACTION_UPPERKICK, ACTION_FIRESHOT, ACTION_DOWNKICK, ACTION_JUMPDOWNKICK, ACTION_SHELBUSTER,
		ACTION_HOLDINGSHOT, ACTION_RISINGATTACK, ACTION_TECHNICALDOWNAB, ACTION_TECHNICALDOWNF, ACTION_GRAVITYSHOT,
		ACTION_GAILSHOT, ACTION_MOVESHOTF, ACTION_MOVESHOTB, ACTION_MOVESHOTL, ACTION_MOVESHOTR,
		ACTION_DAMAGEF, ACTION_DAMAGEB, ACTION_DAMAGEL, ACTION_DAMAGER, ACTION_UP, ACTION_DOWN, ACTION_STUN, ACTION_DIE,
		ACTION_END
	};

private:
	explicit			CMistic(LPDIRECT3DDEVICE9 pGraphicDev, const wstring& wstrName);
	virtual				~CMistic(void);

public:
	virtual	void Set_ActionEnd(void);
	const _bool* CMistic::Get_IsSkill(const _uint& iState) const;
	_bool Get_CameraMove(void);
	vector<CMisticBullet*>* Get_Bullet(void);
public:
	void Set_Skill(const SKILL_ID eID);
	void Compute_Camera(void);
	void Shot_Bullet(const _vec3 & vPos, const _vec3 & vDir, const Engine::COLINFO & tColInfo);
public:
	virtual HRESULT Start_ForScene(void);
	virtual void Update_Object(const _float& fTimeDelta);
	virtual void Render_Object(void);
	virtual	void Render_Object(LPD3DXEFFECT pEffect, const _uint iPassIdx);

private:
	vector<CMisticBullet*> m_vecBullet;

private:
	HRESULT				Ready_Object(SCENE_TYPE eSceneType);
	HRESULT				Add_Component(void);
	HRESULT				SetUp_ConstantTable(LPD3DXEFFECT pEffect);
	HRESULT				Set_Shadow_ConstanTable(LPD3DXEFFECT pEffect);
	HRESULT				Set_CACD_Shadow_ConstanTable(LPD3DXEFFECT pEffect);

public:
	static CMistic* Create(LPDIRECT3DDEVICE9 pGraphicDev, const wstring& wstrName, SCENE_TYPE eSceneType);
private:
	virtual void		Free(void);
};

#endif // Mistic_h__
