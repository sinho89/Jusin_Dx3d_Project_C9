#ifndef Enum_h__
#define Enum_h__


enum OBJECT_MODE {MODE_MOVE, MODE_ANGLE, MODE_STOP, MODE_MODIFY, MODE_DEBUG};

enum INTROVEDIO_ID { INTRO_FIGHTER, INTRO_HUNTER, INTRO_SHAMAN, INTRO_WITCHBLADE, INTRO_MISTIC, INTRO_END };
// DunGeon Type
enum DUNGEON_ID { DUNGEON_NONE, DUNGEON_ICE, DUNGEON_FIRE, DUNGEON_END};
// Window Type
enum WINDOW_ID { WINDOW_INFO, WINDOW_INVEN, WINDOW_SHOP, WINDOW_SKILL, WINDOW_PARTITION, WINDOW_ESC, WINDOW_BUY, WINDOW_SELL, WINDOW_SYSTEM, WINDOW_DUNGEON, WINDOW_END};
// Shop Type
enum SHOP_ID { SHOP_WEAPON, SHOP_ARMOR, SHOP_ACC, SHOP_POTION, SHOP_END};
// Item Type
enum ITEM_ID { ITEM_BLUE_WEAPON, ITEM_RED_WEAPON, ITEM_S_RED_WEAPON, ITEM_S_BLUE_WEAPON, ITEM_HELMET, ITEM_S_HELMET, ITEM_SHORDER, ITEM_S_SHORDER, ITEM_ARMOR, ITEM_S_ARMOR, ITEM_LEG, ITEM_S_LEG, ITEM_GLOVE, ITEM_S_GLOVE, ITEM_BOOTS, ITEM_S_BOOTS, ITEM_SKILLSTONE, ITEM_AMULET, ITEM_EARING, ITEM_BELT, ITEM_ARMLET, ITEM_RING, ITEM_RING2, ITEM_ARROW, ITEM_HPPOTION, ITEM_MPPOTION, ITEM_LEVELPOTION, ITEM_ETC, ITEM_END};
// Slot Type
enum SLOT_ID { SLOT_NORMAL, SLOT_QUEST, SLOT_CASH, SLOT_END};
// Num Type
enum NUM_ID { NUM_ONE, NUM_TEN, NUM_HUN, NUM_TOU, NUM_MIL, NUM_END};

// Model Type
enum MODEL_ID {	WB_WEAPON_L, WB_WEAPON_R, WB_WEAPON_L_IN, WB_WEAPON_R_IN, M_WEAPON, M_WEAPON_IN};

// UI Effect Type
enum UI_EFFECT_ID {	UIEFF_COOLTIME, UIEFF_COOLTIME_END, UIEFF_STAGE_CLEAR, UIEFF_GETITEM_NONESELECT, UIEFF_GETITEM_SELECT, UIEFF_END };
// Monster Type
enum MONSTER_ID { MON_B_War, MON_B_Axe, MON_B_Bow, MON_HANUMAN, MON_KNOLE_COMMANDER, MON_BARDIEL, MON_END };

// Fade Type
enum FADE_ID { FADE_BIM, FADE_PELL, FADE_LEE, FADE_SUNG, FADE_SANG, FADE_JUM, FADE_JI, FADE_GOO, 
				FADE_SO, FADE_UL, FADE_VELL, FADE_ICE_LEE, FADE_HA, FADE_NOO, FADE_MAN, FADE_EU, FADE_DONG, FADE_GOOL,
				FADE_VOL, FADE_S, FADE_LAN, FADE_D, FADE_BA, FADE_R, FADE_DI, FADE_EL, FADE_JU, FADE_DOON, FADE_FIRE_JI, FADE_END };

// Boss UI Type
enum GAGE_ID {	GAGE_RED, GAGE_YEL, GAGE_GREEN, GAGE_BLUE, GAGE_PUP};
// Weapon Type
enum WEAPON_ID { WEAPON_RED, WEAPON_BLUE, WEAPON_S_RED, WEAPON_S_BLUE, WEAPON_END};
enum HELMET_ID { HELMET_NORMAL, S_HELMET, HELMET_END};
enum ARMOR_ID { ARMOR_NORMAL, S_ARMOR, ARMOR_END};
enum LEG_ID { LEG_NORMAL, S_LEG, LEG_END};
enum GLOVE_ID { GLOVE_NORMAL, S_GLOVE, GLOVE_END};
enum BOOTS_ID { BOOTS_NORMAL, S_BOOTS, BOOTS_END};
enum SHORDER_ID { SHORDER_NORMAL, S_SHORDER, SHORDER_END};
enum AMULET_ID { AMULET_NORMAL, AMULET_END};
enum ARMLET_ID { ARMLET_NORMAL, ARMLET_END};
enum BELT_ID { BELT_NORMAL, BELT_END};
enum EARING_ID { EARING_NORMAL, EARING_END};
enum RING_ID { RING_NORMAL, RING_NORMAL2, RING_END};
enum POTION_ID { POTION_HP, POTION_MP, POTION_LEVEL, POTION_END };
enum TOOLTIP_ID { TOOLTIP_WEAPON_RED, TOOLTIP_WEAPON_BLUE, TOOLTIP_S_WEAPON_RED, TOOLTIP_S_WEAPON_BLUE, TOOLTIP_HELMET, TOOLTIP_S_HELMET, TOOLTIP_ARMOR, TOOLTIP_S_ARMOR, TOOLTIP_LEG, TOOLTIP_S_LEG, 
				TOOLTIP_GLOVE, TOOLTIP_S_GLOVE, TOOLTIP_BOOTS, TOOLTIP_S_BOOTS,
				TOOLTIP_SHORDER, TOOLTIP_S_SHORDER, TOOLTIP_AMULET, TOOLTIP_ARMLET, TOOLTIP_BELT, TOOLTIP_EARING, TOOLTIP_RING, TOOLTIP_RING2, TOOLTIP_HP_POTION,
				TOOLTIP_MP_POTION, TOOLTIP_LEVELUP_ITEM, TOOLTIP_SKILLSTONE, TOOLTIP_END};


enum SKILL_ID { SKILL_RUSH, SKILL_FLYDANCE, SKILL_FLEDGE_BLADE, SKILL_STUNPIN, SKILL_VIOLET, SKILL_CROSS, SKILL_SPIRALDANCE, SKILL_DARKPOLLING, SKILL_DRAGONDANCE,
				SKILL_DASH, SKILL_LIDDLEKICK, SKILL_EVADEATT, SKILL_TECHDOWN, SKILL_BLARE, SKILL_UPATT, SKILL_VIFERKICK, SKILL_SPININGHEART, SKILL_BLACKROSE, SKILL_SKINNING, SKILL_TRICKEY, 
				SKILL_FLENITDANCE, SKILL_PLORA, SKILL_SOFTLANDING, SKILL_SILUETDANCE, SKILL_HILLTURN, SKILL_URBANBREAT, SKILL_MAXHP, SKILL_MAXMP, 
				SKILL_CRITICAL, SKILL_ATTMASTER, SKILL_BLOODAGIL, /*미스틱*/ SKILL_DOWNKICK, SKILL_JUMPDOWNKICK, SKILL_SPINCRASH, SKILL_ESCAPE, SKILL_HOLDSHOT, SKILL_UPPERKICK, SKILL_FIREM, SKILL_GEILSHOT, 
				SKILL_GRAVITY, SKILL_LOCKON, SKILL_MOVINGCANNON, SKILL_SHELLBUSTER, SKILL_SHOTJUMP, SKILL_NONE, SKILL_END};

enum SKILL_TYPE { SKILL_TYPE_ACTION, SKILL_TYPE_COMMAND, SKILL_TYPE_PASSIVE, SKILL_TYPE_END};

// UI 관련 커맨드
enum UI_KEY_TYPE {UI_KEY_1, UI_KEY_2, UI_KEY_3, UI_KEY_4, UI_KEY_5, UI_KEY_6, UI_KEY_7, UI_KEY_8, UI_KEY_9, UI_KEY_0,
					UI_KEY_Ctrl, UI_KEY_Z, UI_KEY_X, UI_KEY_C, UI_KEY_V, UI_KEY_G, UI_KEY_B, UI_KEY_R, UI_KEY_T,
					UI_KEY_INVEN, UI_KEY_INFO, UI_KEY_SKILL, UI_KEY_ESC,UI_KEY_END};
//플레이어 애니메이션 상태 (마을 이동, 마을 점프, 마을 잡다한거(레벨업 줍기등?), 
//이동, 점프, 공격, 스킬, 피격, 회피, 잡다한거)

enum PLAYER_ANISTATE { PLAYER_TOWN, PLAYER_DUNGEON, PLAYER_FIGHT, PLAYER_END };

enum MONSTER_ANISTATE { MONSTER_NORMAL, MONSTER_FIGHT, MONSTER_END };

//애니메이션에 추가해야할 정보
enum ANI_EVENT { EVENT_EFFECT, EVENT_SOUND, EVENT_END };

// 플레이어가 던전에 있는지 마을에 있는지 판단하는 변수
enum SCENE_TYPE { SCENE_TOWN, SCENE_DUNGEON, SCENE_END };



#endif // Enum_h__
