#ifndef Export_System_h__
#define Export_System_h__

#include "Engine_Defines.h"
#include "GraphicDev.h"
#include "Timer_Manager.h"
#include "Frame_Manager.h"
#include "Font_Manager.h"
#include "Input_Device.h"

// Á¤ÀÇ
BEGIN(Engine)

// For.GraphicDev Instance ---------------------------------------------------------------------------------------------------------------------------------------
// Getter --------------------------------------------------------------------------------------------------------------------------------------------------------
inline HRESULT Get_GraphicDev(LPDIRECT3DDEVICE9* ppGraphicDev);
// Setter --------------------------------------------------------------------------------------------------------------------------------------------------------
// General ----------------------------1---------------------------------------------------------------------------------------------------------------------------
inline HRESULT Ready_GraphicDev(HWND hWnd, Engine::CGraphicDev::WINMODE eMode, const _uint& iSizeX, const _uint& iSizeY, Engine::CGraphicDev** ppGraphicDev);


// For.Timer_Manager Instance ---------------------------------------------------------------------------------------------------------------------------------------
// Getter --------------------------------------------------------------------------------------------------------------------------------------------------------
inline _float Get_TimeDelta(const _tchar* pTimerTag);	
// Setter --------------------------------------------------------------------------------------------------------------------------------------------------------
inline void SetUp_TimeDelta(const _tchar* pTimerTag);
// General ----------------------------1---------------------------------------------------------------------------------------------------------------------------
inline HRESULT Ready_Timer(const _tchar* pTimerTag);



// For.Frame_Manager Instance ---------------------------------------------------------------------------------------------------------------------------------------
// Getter --------------------------------------------------------------------------------------------------------------------------------------------------------
inline _bool isPermit_Call(const _tchar* pFrameTag, const _float& fTimeDelta);
// Setter --------------------------------------------------------------------------------------------------------------------------------------------------------
// General --------------------------------------------------------------------------------------------------------------------------------------------------------
inline HRESULT Ready_Frame(const _tchar* pFrameTag, const _float& fCallLimit);


// For.Font_Manager Instance ---------------------------------------------------------------------------------------------------------------------------------------
// Getter --------------------------------------------------------------------------------------------------------------------------------------------------------
// Setter --------------------------------------------------------------------------------------------------------------------------------------------------------
// General --------------------------------------------------------------------------------------------------------------------------------------------------------
inline HRESULT Ready_Font(LPDIRECT3DDEVICE9 pGraphicDev, const _tchar* pFontPath, const _tchar* pFontTag, const _tchar* pFontType, const _uint& iWidth, const _uint& iHeight, const _uint& iWeight);
inline void Render_Font(const _tchar* pFontTag, const _tchar* pString, const _vec2* pPosition, D3DXCOLOR Color);

// For.Input_Device Instance ---------------------------------------------------------------------------------------------------------------------------------------
// Getter --------------------------------------------------------------------------------------------------------------------------------------------------------
inline _byte Get_DIKeyState(_ubyte byKeyID);
inline _byte Get_DIMouseState(CInput_Device::MOUSEKEYSTATE byMouseID);
inline _long Get_DIMouseMove(CInput_Device::MOUSEMOVESTATE byMouseMoveState);
// Setter --------------------------------------------------------------------------------------------------------------------------------------------------------
inline void SetUp_InputState(void);
inline void Set_Acquire(void);
// General --------------------------------------------------------------------------------------------------------------------------------------------------------
inline HRESULT Ready_InputDevice(HINSTANCE hInst, HWND hWnd);

// For.Release System Instance---------------------------------------------------------------------------------------------------------------------------------------
inline void Release_System(void);

#include "Export_System.inl"

END



#endif // Export_System_h__
