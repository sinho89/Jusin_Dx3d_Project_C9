#ifndef Engine_Enum_h__
#define Engine_Enum_h__

namespace Engine
{
	// 컴포넌트의 속성
	// : ID_DYNAMIC == 매 프레임마다 업데이트 되어야할 컴포넌트들의 집합
	// : ID_STATIC == 매 프레임마다 안업데이트 되어야할 컴포넌트들의 집합
	enum COMPONENTID { COMID_DYNAMIC, COMID_STATIC, COMID_END };
	// 객체의 상태
	enum OBJECTSTATE { STATE_DEFAULT, STATE_DESTROY };

	enum INFO { INFO_RIGHT, INFO_UP, INFO_LOOK, INFO_POSITION, INFO_END };
	enum ROTATION { ROT_X, ROT_Y, ROT_Z, ROT_END };
	enum TEXTURETYPE { TEX_NORMAL, TEX_CUBE, TEX_END };
	enum BUFFERID { BUFFER_TRICOL, BUFFER_TRITEX, BUFFER_RCCOL, BUFFER_RCTEX, BUFFER_CUBECOL, BUFFER_CUBETEX, BUFFER_GRIDCOL, BUFFER_PENTAGON, BUFFER_TRAILTEX };
	enum MESHTYPE { MESH_STATIC, MESH_DYNAMIC, MESH_NAVIGATION };

	// MapLayer WORD(키)
	enum LAYERTYPE { LAYER_ENVIRONMENT, LAYER_WEAPON, LAYER_GAMELOGIC, LAYER_UI, LAYER_CAM, LAYER_END };
	enum PENTAGONID { PENTAGON_CENTER, PENTAGON_INT, PENTAGON_CON, PENTAGON_STR, PENTAGON_LEVEL, PENTAGON_WIS, PENTAGON_END };

	//Scene Type
	enum SCENEID { SCENE_LOGO, SCENE_LOGIN, SCENE_SELECT, SCENE_CREATE, SCENE_TOWN, SCENE_STAGE_ICE, SCENE_STAGE_FIRE, SCENE_LOADING, SCENE_END };

	//Camera Type
	enum CAMERA_ID { CAMERA_LIGHT, CAMERA_PLAYER, CAMERA_WORLD, CAMERA_UI, CAMERA_MINIMAP, CAMERA_END };

	//Render ID
	enum RENDERID { RENDER_PRIORITY, RENEDER_DYANAMIC_SHADOW, RENDER_STATIC_SHADOW, RENDER_DYNAMIC, RENDER_STATIC, RENDER_DECAL, RENDER_NONALPHA, RENDER_STAGE_DEPTH, RENDER_ALPHA, RENDER_MOTION_BLUR, RENDER_POSTEFFECT_BLUR, RENDER_POSTEFFECT,RENDER_MINIMAP, RENDER_UI, RENDER_CURSOR, RENDER_END };
	//Render Target Type
	enum RENDERTARGETID 
	{
		R_TARGET_SHADOWMAP, R_TARGET_SHADOWMAP_1, R_TARGET_SHADOWMAP_2, R_TARGET_ALBEDO, R_TARGET_NORMAL, R_TARGET_SPECULAR, R_TARGET_DYNAMIC_SPECULAR, 
		R_TARGET_DEPTH, R_TARGET_CHAR_SAMPLER, R_TARGET_OUTLINE_CHAR, R_TARGET_STATIC_SAMPLER,	R_TARGET_STAGEMAP_DEPTH, R_TARGET_LIMLIGHT, R_TARGET_DECAL, R_TARGET_SSAO,
		R_TARGET_EFFECT, R_TARGET_DIRECTIONAL_LIGHT, R_TARGET_DIRECTIONAL_SPEC, R_TARGET_POINT_LIGHT, R_TARGET_POINT_SPECF, R_TARGET_LIGHT_BLUR_A, 
		R_TARGET_LIGHT_BLUR_B, R_TARGET_LIGHT_BLUR_DEPTH_A, R_TARGET_LIGHT_BLUR_DEPTH_B, R_TARGET_LIGHT_BLUR, R_TARGET_SHADE, R_TARGET_ALL_SPECULAR, 
		R_TARGET_OUTLINE, R_TARGET_SHADOW, R_TARGET_CHAR_SAMPLER_SHADE, R_TARGET_CHAR_SAMPLER_SHADE_HDR, R_TARGET_BLEND, R_TARGET_HDR, R_TARGET_DOF_BLUR, R_TARGET_DOF,
		R_TARGET_MOTION_BLUR, R_TARGET_POSTEFFECT_BLUR, R_TARGET_ALL_POSTEFFECT_BLUR, R_TARGET_ALL_POSTEFFECT_BLUR_DEPTH, R_TARGET_POSTEFFECT, 
		R_TARGET_FINAL, R_TARGET_MINIMAP, R_TARGET_END
	};

	//MRT Type
	enum MRTID { MRT_DEFERRED_0, MRT_DEFERRED_1, MRT_DEFERRED_2, MRT_DEFERRED_3, MRT_DEFERRED_4, MRT_DECAL, MRT_EFFECT, MRT_MOTION_BLUR, MRT_DIRECTIONAL_LIGHT, MRT_POINT_LIGHT, MRT_SHADE, MRT_LIGHT_BLUR, MRT_SHADOW, MRT_BLEND, MRT_MINIMAP, MRT_MINIMAP_DRAW, MRT_POSTEFFECT, MRT_POSTEFFECT_BLUR,
				MRT_DRAW_DYNAMIC_SHADOWMAP, MRT_DRAW_STATIC_SHADOWMAP};

	//Blur Type
	enum BLURTYPE {BLUR_HORIZON, BLUR_VERTICAL, BLUR_CROSS, BLUR_X, BLUR_STAR, BLUR_END};

	//파티클 속성
	enum PARTICLE_MOVEMENT { MOVE_NORMAL, MOVE_FIRE, MOVE_CYCLONE, MOVE_END };

	//네비메쉬 속성
	enum NAVI_TYPE { TYPE_NORMAL, TYPE_FALL, TYPE_SELECT };

	// 충돌체 타입
	enum COL_TYPE { COL_SPHERE, COL_BOX, COL_END };

	//충돌정보
	enum COL_INFO { COL_BASE, COL_PUSH, COL_SMASH, COL_FLY, COL_SPINA, COL_SPINB, COL_STAMP, COL_CAPTURE, COL_STUN, COL_INFO_END };
	//충돌 방향정보
	enum COL_DIR { DIR_LOOK, DIR_DEST };

	//프로젝트 타입
	enum PROJECTID { PROJECT_CLIENT, PROJECT_ANIMATION, PROJECT_MAP, PROJECT_EFFECT };
}

#endif // Engine_Enum_h__
